package lineSegment;

import java.util.ArrayList;

public class LineSegment {
	// Segment Ingredient class --> represent ingredient of line segment (gradient, x_intercept, y_intercept)
	static class SegmentIngredient {
		// constructor for "ax+by+c = 0"
		SegmentIngredient(double gradient, double y_intercept) {
			isNoGradient = false;
			this.gradient = gradient;
			this.y_intercept = y_intercept;
		}
		
		// constructor for "x=3"
		SegmentIngredient(double x_intercept) {
			isNoGradient = true;
			this.x_intercept = x_intercept;
		}
		
		private double x_coeff;
		private double y_coeff;
		private double c_coeff;
		
		// gradient --> only use "y=ax+b"
		public double getGradient() throws Exception {
			if(!isNoGradient) return gradient;
			else throw new Exception("There is no gradient");
		}
		// Y intercept --> only use "y=ax+b"
		public double getYIntercept() throws Exception {
			if(!isNoGradient) return y_intercept;
			else throw new Exception("There is no gradient");
		}
		// X intercept --> only use "x=c"
		public double getXIntercept() throws Exception {
			if(isNoGradient) return x_intercept;
			else throw new Exception("There is no gradient");
		}
		
		/*
		 * static method to make line ingredient with point p1, p2
		 * - calculate gradient, y_intercept or only x_intercept
		 */
		public static SegmentIngredient makeIngredient(Point p1, Point p2) {
			if(p1.x == p2.x)	return new SegmentIngredient(p1.x);
			else {
				double gradient = (double)(p1.y - p2.y) / (double)(p1.x - p2.x);
				double y_intercept = p1.y - gradient*p1.x;
				return new SegmentIngredient(gradient, y_intercept);
			}
		}
	}
	
	ArrayList<Point> points = new ArrayList<Point>();	// points contained in line segment.
	SegmentIngredient ingredient;
	
	// make line with 2 points
	public LineSegment(Point p1, Point p2) {
		points.add(p1); points.add(p2);
		ingredient = SegmentIngredient.makeIngredient(p1, p2);
	}
	
	// check that some point is on line segment. 
	public Boolean isOnLineSegment(Point p) throws Exception {
		if(ingredient.isNoGradient) return p.x == ingredient.getXIntercept();
		else {
			double compareYValue = ingredient.getGradient() * p.x + ingredient.getYIntercept();
			return Double.valueOf(compareYValue).equals(Double.valueOf(p.y));
		}
	}
	
	public void addPoint(Point p) {
		points.add(p);
	}
	
	// fill out points that which line they are contained
	public void setPointsLineIndex(int index) {
		for(int i=0; i<points.size(); i++) {
			points.get(i).addSegmentIndex(index);
		}
	}
}
