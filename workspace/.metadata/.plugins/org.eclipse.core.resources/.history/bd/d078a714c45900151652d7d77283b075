package lineSegment;

import java.util.ArrayList;
import java.util.Comparator;

public class Point {
	int x, y;
	ArrayList<Integer> assignedSegmentIndexList = new ArrayList<Integer>();
	
	Point() {
		x = -1;		y = -1;
	}
	public Point(int x, int y) {
		this.x = x;	this.y = y;
	}
	
	public int getX() { return x; }
	public int getY() { return y; }
	
	public void addSegmentIndex(int index) {
		assignedSegmentIndexList.add(index);
	}
	public ArrayList<Integer> getSegmentList() { return assignedSegmentIndexList; }
	public Boolean isCrossingPoint() {
		return assignedSegmentIndexList.size() >= 2;
	}
	public Boolean isHavingSameLineSegment(Point p) {
		for(int i=0; i<assignedSegmentIndexList.size(); i++) {
			int myIndex = assignedSegmentIndexList.get(i);
			for(int j=0; j<p.assignedSegmentIndexList.size(); j++) {
				int compareIndex = p.assignedSegmentIndexList.get(j);
				if(myIndex == compareIndex) return true;
			}
		}
		return false;
	}
	public String showAssignedLineSegment() {
		if(this.assignedSegmentIndexList.isEmpty()) return "isEmpty";
		String returnValue = "";
		for(int i=0; i<this.assignedSegmentIndexList.size(); i++) {
			returnValue += assignedSegmentIndexList.get(i) + " ";
		}
		return returnValue;
	}
	
	static class lexicographicCompare implements Comparator<Point> {
		 
		/**
		 * 오름차순(ASC)
		 */
		@Override
		public int compare(User arg0, User arg1) {
			// TODO Auto-generated method stub
			return arg0.getNo() < arg1.getNo() ? -1 : arg0.getNo() > arg1.getNo() ? 1:0;
		}
 
	}
}
